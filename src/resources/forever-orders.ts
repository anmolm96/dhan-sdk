// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import * as Core from '../core';
import * as ForeverOrdersAPI from './forever-orders';

export class ForeverOrders extends APIResource {
  /**
   * The order request api allows you place a new forever order.
   */
  create(params: ForeverOrderCreateParams, options?: Core.RequestOptions): Core.APIPromise<GttOrderStatus> {
    const { 'access-token': accessToken, ...body } = params;
    return this._client.post('/forever/orders', {
      body,
      ...options,
      headers: { 'access-token': accessToken, ...options?.headers },
    });
  }

  /**
   * The api allows you to modify pending forever order in orderbook. The fields that
   * can be modified are price, quantity and order type.
   */
  update(
    orderId: string,
    params: ForeverOrderUpdateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<GttOrderStatus> {
    const { 'access-token': accessToken, ...body } = params;
    return this._client.put(`/forever/orders/${orderId}`, {
      body,
      ...options,
      headers: { 'access-token': accessToken, ...options?.headers },
    });
  }

  /**
   * The api allows you to retrieve an array of all forever orders placed with their
   * last updated status.
   */
  list(
    params: ForeverOrderListParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<ForeverOrderListResponse> {
    const { 'access-token': accessToken } = params;
    return this._client.get('/forever/orders', {
      ...options,
      headers: { 'access-token': accessToken, ...options?.headers },
    });
  }

  /**
   * The api allows you to cancel existing forever order.
   */
  delete(
    orderId: string,
    params: ForeverOrderDeleteParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<GttOrderStatus> {
    const { 'access-token': accessToken } = params;
    return this._client.delete(`/forever/orders/${orderId}`, {
      ...options,
      headers: { 'access-token': accessToken, ...options?.headers },
    });
  }
}

export interface GttOrder {
  /**
   * Time at which the record is created
   */
  createTime?: string;

  /**
   * User specific identification generated by Dhan
   */
  dhanClientId?: string;

  /**
   * Contract Expiry Date for F&O
   */
  drvExpiryDate?: string;

  /**
   * Type of Option
   */
  drvOptionType?: 'CALL' | 'PUT' | 'NA';

  /**
   * Strike Price for Options
   */
  drvStrikePrice?: number;

  /**
   * | **Enums** | **Exchange** | **Segment**       |
   * | --------- | ------------ | ----------------- |
   * | NSE_EQ    | NSE          | Equity Cash       |
   * | NSE_FNO   | NSE          | Futures & Options |
   * | BSE_EQ    | BSE          | Equity Cash       |
   * | MCX_COMM  | MCX          | Commodity         |
   */
  exchangeSegment?: 'NSE_EQ' | 'NSE_FNO' | 'BSE_EQ' | 'BSE_FNO' | 'MCX_COMM';

  /**
   * Time at which order reached at exchange end
   */
  exchangeTime?: string;

  /**
   * Order leg of Forever Order where modification is to be done
   */
  legName?: 'TARGET_LEG' | 'STOP_LOSS_LEG';

  /**
   * Order specific identification generated by Dhan
   */
  orderId?: string;

  /**
   * | **Enum Values** | **Description**                             |
   * | --------------- | ------------------------------------------- |
   * | PENDING         | Reached at exchange end, awaiting execution |
   * | REJECTED        | Rejected at exchange/broker’s end           |
   * | CANCELLED       | Cancelled by user                           |
   * | EXPIRED         | Validity of order is expired                |
   */
  orderStatus?: 'PENDING' | 'REJECTED' | 'CANCELLED' | 'EXPIRED';

  /**
   * | **Enum Values** | **Description**                |
   * | --------------- | ------------------------------ |
   * | SINGLE          | For Single Forever Order types |
   * | OCO             | For OCO Forever Order types    |
   */
  orderType?: 'SINGLE' | 'OCO';

  /**
   * Price at which order is placed
   */
  price?: number;

  /**
   * | **Enum Values** | **Description**                        |
   * | --------------- | -------------------------------------- |
   * | CNC             | Cash & Carry for equity deliveries     |
   * | INTRADAY        | Intraday for Equity, Futures & Options |
   * | MARGIN          | Carry Forward in Futures & Options     |
   */
  productType?: 'CNC' | 'INTRADAY' | 'MARGIN';

  /**
   * Number of shares for the order
   */
  quantity?: number;

  /**
   * Exchange standard identification for each scrip
   */
  securityId?: string;

  /**
   * Exchange standard trading symbol
   */
  tradingSymbol?: string;

  /**
   * Signifies the type of transaction whether it's BUY or SELL
   */
  transactionType?: 'BUY' | 'SELL';

  /**
   * Price at which the order is triggered
   */
  triggerPrice?: number;

  /**
   * Time at which the record is updated
   */
  updateTime?: string;
}

export interface GttOrderStatus {
  /**
   * Order specific identification generated by Dhan
   */
  orderId?: string;

  /**
   * | **Enum Values** | **Description**                             |
   * | --------------- | ------------------------------------------- |
   * | PENDING         | Reached at exchange end, awaiting execution |
   * | REJECTED        | Rejected at exchange/broker’s end           |
   * | CANCELLED       | Cancelled by user                           |
   * | EXPIRED         | Validity of order is expired                |
   */
  orderStatus?: 'PENDING' | 'REJECTED' | 'CANCELLED' | 'EXPIRED';
}

export type ForeverOrderListResponse = Array<GttOrder>;

export interface ForeverOrderCreateParams {
  /**
   * Body param: The trading side of transaction
   */
  transactionType: 'BUY' | 'SELL';

  /**
   * Header param:
   */
  'access-token': string;

  /**
   * Body param: The user/partner generated id for tracking back
   */
  correlationId?: string;

  /**
   * Body param: User specific identification generated by Dhan
   */
  dhanClientId?: string;

  /**
   * Body param: Number of shares visible (Keep more than 30% of quantity)
   */
  disclosedQuantity?: number;

  /**
   * | Body param: | **Enums** | **Exchange**      | **Segment** |
   * | ----------- | --------- | ----------------- | ----------- |
   * | NSE_EQ      | NSE       | Equity Cash       |
   * | NSE_FNO     | NSE       | Futures & Options |
   * | BSE_EQ      | BSE       | Equity Cash       |
   * | BSE_FNO     | BSE       | Futures & Options |
   */
  exchangeSegment?: 'NSE_EQ' | 'NSE_FNO' | 'BSE_EQ' | 'BSE_FNO';

  /**
   * | Body param: | **Enum Values**     | **Description** |
   * | ----------- | ------------------- | --------------- |
   * | SINGLE      | For GTT Order types |
   * | OCO         | For OCO Order types |
   */
  orderFlag?: 'SINGLE' | 'OCO';

  /**
   * | Body param: | **Enum Values**        | **Description** |
   * | ----------- | ---------------------- | --------------- |
   * | LIMIT       | For Limit Order types  |
   * | MARKET      | For market Order types |
   */
  orderType?: 'LIMIT' | 'MARKET';

  /**
   * Body param: Price at which order is placed
   */
  price?: number;

  /**
   * Body param: Target price for OCO order
   */
  price1?: number;

  /**
   * | Body param: | **Enum Values**                    | **Description** |
   * | ----------- | ---------------------------------- | --------------- |
   * | CNC         | Cash & Carry for equity deliveries |
   * | MTF         | Margin Traded Fund                 |
   */
  productType?: 'CNC' | 'MTF';

  /**
   * Body param: Number of shares for the order
   */
  quantity?: number;

  /**
   * Body param: Target Quantity for OCO order
   */
  quantity1?: number;

  /**
   * Body param: Exchange standard identification for each scrip
   */
  securityId?: string;

  /**
   * Body param: Price at which the order is triggered
   */
  triggerPrice?: number;

  /**
   * Body param: Target trigger price For OCO order
   */
  triggerPrice1?: number;

  /**
   * Body param: Valid for 1Year/Expiry
   */
  validity?: string;
}

export interface ForeverOrderUpdateParams {
  /**
   * Header param:
   */
  'access-token': string;

  /**
   * Body param: User specific identification generated by Dhan
   */
  dhanClientId?: string;

  /**
   * Body param: Number of shares visible (Keep more than 30% of quantity)
   */
  disclosedQuantity?: number;

  /**
   * | Body param:   | **Enum Values**                      | **Description** |
   * | ------------- | ------------------------------------ | --------------- |
   * | TARGET_LEG    | For Target Leg                       |
   * | STOP_LOSS_LEG | For SL leg, in case of OCO OrderType |
   */
  legName?: 'TARGET_LEG' | 'STOP_LOSS_LEG';

  /**
   * | Body param: | **Enum Values**     | **Description** |
   * | ----------- | ------------------- | --------------- |
   * | SINGLE      | For GTT Order types |
   * | OCO         | For OCO Order types |
   */
  orderFlag?: 'SINGLE' | 'OCO';

  /**
   * Body param: Order specific identification generated by Dhan
   */
  orderId?: string;

  /**
   * | Body param: | **Enum Values**        | **Description** |
   * | ----------- | ---------------------- | --------------- |
   * | LIMIT       | For Limit Order types  |
   * | MARKET      | For market Order types |
   */
  orderType?: 'LIMIT' | 'MARKET';

  /**
   * Body param: Price at which order is placed
   */
  price?: number;

  /**
   * Body param: Number of shares for the order
   */
  quantity?: number;

  /**
   * Body param: Price at which the order is triggered, in case of SL-M & SL-L
   */
  triggerPrice?: number;

  /**
   * Body param: Valid for 1Year/Expiry
   */
  validity?: string;
}

export interface ForeverOrderListParams {
  'access-token': string;
}

export interface ForeverOrderDeleteParams {
  'access-token': string;
}

export namespace ForeverOrders {
  export import GttOrder = ForeverOrdersAPI.GttOrder;
  export import GttOrderStatus = ForeverOrdersAPI.GttOrderStatus;
  export import ForeverOrderListResponse = ForeverOrdersAPI.ForeverOrderListResponse;
  export import ForeverOrderCreateParams = ForeverOrdersAPI.ForeverOrderCreateParams;
  export import ForeverOrderUpdateParams = ForeverOrdersAPI.ForeverOrderUpdateParams;
  export import ForeverOrderListParams = ForeverOrdersAPI.ForeverOrderListParams;
  export import ForeverOrderDeleteParams = ForeverOrdersAPI.ForeverOrderDeleteParams;
}
