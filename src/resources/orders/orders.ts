// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import * as Core from '../../core';
import * as OrdersAPI from './orders';
import * as Shared from '../shared';
import * as ExternalAPI from './external';

export class Orders extends APIResource {
  external: ExternalAPI.External = new ExternalAPI.External(this._client);

  /**
   * The order request API allows you to place new order.
   */
  create(params: OrderCreateParams, options?: Core.RequestOptions): Core.APIPromise<OrderStatus> {
    const { 'access-token': accessToken, ...body } = params;
    return this._client.post('/orders', {
      body,
      ...options,
      headers: { 'access-token': accessToken, ...options?.headers },
    });
  }

  /**
   * The api allows you to retrieve the details of an order placed during the day
   * with their last updated status, with their order id.
   */
  retrieve(
    orderId: string,
    params: OrderRetrieveParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<Shared.Order> {
    const { 'access-token': accessToken } = params;
    return this._client.get(`/orders/${orderId}`, {
      ...options,
      headers: { 'access-token': accessToken, ...options?.headers },
    });
  }

  /**
   * The api allows you modify pending order in orderbook. The fields that can be
   * modified are price, quantity, order type & validity.
   */
  update(
    orderId: string,
    params: OrderUpdateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<OrderStatus> {
    const { 'access-token': accessToken, ...body } = params;
    return this._client.put(`/orders/${orderId}`, {
      body,
      ...options,
      headers: { 'access-token': accessToken, ...options?.headers },
    });
  }

  /**
   * The API lets you retrieve an array of all orders requested in a day with their
   * last updated status.
   */
  list(params: OrderListParams, options?: Core.RequestOptions): Core.APIPromise<OrderListResponse> {
    const { 'access-token': accessToken } = params;
    return this._client.get('/orders', {
      ...options,
      headers: { 'access-token': accessToken, ...options?.headers },
    });
  }

  /**
   * The api allows you to cancel a pending order using the order id
   */
  delete(
    orderId: string,
    params: OrderDeleteParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<OrderStatus> {
    const { 'access-token': accessToken } = params;
    return this._client.delete(`/orders/${orderId}`, {
      ...options,
      headers: { 'access-token': accessToken, ...options?.headers },
    });
  }

  /**
   * The order request API allows you to place a new slice order.
   */
  slicing(params: OrderSlicingParams, options?: Core.RequestOptions): Core.APIPromise<OrderSlicingResponse> {
    const { 'access-token': accessToken, ...body } = params;
    return this._client.post('/orders/slicing', {
      body,
      ...options,
      headers: { 'access-token': accessToken, ...options?.headers },
    });
  }
}

export interface OrderStatus {
  /**
   * Order specific identification generated by Dhan
   */
  orderId?: string;

  /**
   * | **Enum Values** | **Description**                             |
   * | --------------- | ------------------------------------------- |
   * | TRANSIT         | Did not reach the exchange server           |
   * | PENDING         | Reached at exchange end, awaiting execution |
   * | REJECTED        | Rejected at exchange/brokerâ€™s end           |
   * | CANCELLED       | Cancelled by user                           |
   * | PART_TRADED     | Partially Executed                          |
   * | TRADED          | Executed                                    |
   * | EXPIRED         | Validity of order is expired                |
   */
  orderStatus?: 'TRANSIT' | 'PENDING' | 'REJECTED' | 'CANCELLED' | 'PART_TRADED' | 'TRADED' | 'EXPIRED';
}

export type OrderListResponse = Array<Shared.Order>;

export type OrderSlicingResponse = Array<OrderStatus>;

export interface OrderCreateParams {
  /**
   * | Body param:  | **Enums** | **Exchange**      | **Segment** |
   * | ------------ | --------- | ----------------- | ----------- |
   * | NSE_EQ       | NSE       | Equity Cash       |
   * | NSE_FNO      | NSE       | Futures & Options |
   * | NSE_CURRENCY | NSE       | Currency          |
   * | BSE_EQ       | BSE       | Equity Cash       |
   * | BSE_FNO      | BSE       | Futures & Options |
   * | BSE_CURRENCY | BSE       | Currency          |
   * | MCX_COMM     | MCX       | Commodity         |
   */
  exchangeSegment: 'NSE_EQ' | 'NSE_FNO' | 'NSE_CURRENCY' | 'BSE_EQ' | 'BSE_FNO' | 'BSE_CURRENCY' | 'MCX_COMM';

  /**
   * Body param: Signifies the type of transaction wether it's BUY or SELL
   */
  transactionType: 'BUY' | 'SELL';

  /**
   * Header param:
   */
  'access-token': string;

  /**
   * Body param: Flag to inform that the order placed is After Market Order
   */
  afterMarketOrder?: boolean;

  /**
   * Body param: Flag to inform after what time AMO is pumped
   */
  amoTime?: 'OPEN' | 'OPEN_30' | 'OPEN_60' | 'PRE_OPEN';

  /**
   * Body param: Bracket order Target price
   */
  boProfitValue?: number;

  /**
   * Body param: Bracket Order/Cover Order Stop Loss Price
   */
  boStopLossValue?: number;

  /**
   * Body param: The user/partner generated id for tracking back
   */
  correlationId?: string;

  /**
   * Body param: User specific identification generated by Dhan
   */
  dhanClientId?: string;

  /**
   * Body param: Number shares visible in the market depth
   */
  disclosedQuantity?: number;

  /**
   * | Body param:      | **Enum Values**             | **Description** |
   * | ---------------- | --------------------------- | --------------- |
   * | LIMIT            | For Limit Order types       |
   * | MARKET           | For market Order types      |
   * | STOP_LOSS        | For Stop Loss Limit orders  |
   * | STOP_LOSS_MARKET | For Stop Loss Market orders |
   */
  orderType?: 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_MARKET';

  /**
   * Body param: Price at which the order is requested to execute
   */
  price?: number;

  /**
   * | Body param: | **Enum Values**                                | **Description** |
   * | ----------- | ---------------------------------------------- | --------------- |
   * | CNC         | Cash & Carry for equity deliveries             |
   * | INTRADAY    | Intraday for Equity, Futures & Options         |
   * | MARGIN      | Carry Forward in Futures & Options             |
   * | CO          | Cover Order; entry and stop loss               |
   * | BO          | Bracket Order; entry, stop loss & target price |
   * | MTF         | Margin Traded Fund                             |
   *
   * **CO & BO product types will be valid only for Intraday**
   */
  productType?: 'CNC' | 'INTRADAY' | 'MARGIN' | 'MTF' | 'CO' | 'BO';

  /**
   * Body param: Number of shares for the order
   */
  quantity?: number;

  /**
   * Body param: Exchange standard identification for each scrip
   */
  securityId?: string;

  /**
   * Body param: Price at which the order is triggered
   */
  triggerPrice?: number;

  /**
   * | Body param: | **Enum Values**       | **Description** |
   * | ----------- | --------------------- | --------------- |
   * | DAY         | Valid till end of day |
   * | IOC         | Immediate or Cancel   |
   */
  validity?: 'DAY' | 'IOC';
}

export interface OrderRetrieveParams {
  'access-token': string;
}

export interface OrderUpdateParams {
  /**
   * Header param:
   */
  'access-token': string;

  /**
   * Body param: User specific identification generated by Dhan
   */
  dhanClientId?: string;

  /**
   * Body param: Number of shares visible (Keep more than 30% of quantity)
   */
  disclosedQuantity?: number;

  /**
   * Body param: Order leg of Forever Order where modification is to be done
   */
  legName?: 'ENTRY_LEG' | 'STOP_LOSS_LEG' | 'TARGET_LEG' | 'NA';

  /**
   * Body param: Order specific identification generated by Dhan
   */
  orderId?: string;

  /**
   * | Body param:      | **Enum Values**             | **Description** |
   * | ---------------- | --------------------------- | --------------- |
   * | LIMIT            | For Limit Order types       |
   * | MARKET           | For market Order types      |
   * | STOP_LOSS        | For Stop Loss Limit orders  |
   * | STOP_LOSS_MARKET | For Stop Loss Market orders |
   */
  orderType?: 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_MARKET';

  /**
   * Body param: Price at which order is placed
   */
  price?: number;

  /**
   * Body param: Number of shares for the order
   */
  quantity?: number;

  /**
   * Body param: Price at which the order is triggered, in case of SL-M & SL-L
   */
  triggerPrice?: number;

  /**
   * | Body param: | **Enum Values**       | **Description** |
   * | ----------- | --------------------- | --------------- |
   * | DAY         | Valid till end of day |
   * | IOC         | Immediate or Cancel   |
   */
  validity?: 'DAY' | 'IOC';
}

export interface OrderListParams {
  'access-token': string;
}

export interface OrderDeleteParams {
  'access-token': string;
}

export interface OrderSlicingParams {
  /**
   * | Body param:  | **Enums** | **Exchange**      | **Segment** |
   * | ------------ | --------- | ----------------- | ----------- |
   * | NSE_EQ       | NSE       | Equity Cash       |
   * | NSE_FNO      | NSE       | Futures & Options |
   * | NSE_CURRENCY | NSE       | Currency          |
   * | BSE_EQ       | BSE       | Equity Cash       |
   * | BSE_FNO      | BSE       | Futures & Options |
   * | BSE_CURRENCY | BSE       | Currency          |
   * | MCX_COMM     | MCX       | Commodity         |
   */
  exchangeSegment: 'NSE_EQ' | 'NSE_FNO' | 'NSE_CURRENCY' | 'BSE_EQ' | 'BSE_FNO' | 'BSE_CURRENCY' | 'MCX_COMM';

  /**
   * Body param: Signifies the type of transaction wether it's BUY or SELL
   */
  transactionType: 'BUY' | 'SELL';

  /**
   * Header param:
   */
  'access-token': string;

  /**
   * Body param: Flag to inform that the order placed is After Market Order
   */
  afterMarketOrder?: boolean;

  /**
   * Body param: Flag to inform after what time AMO is pumped
   */
  amoTime?: 'OPEN' | 'OPEN_30' | 'OPEN_60' | 'PRE_OPEN';

  /**
   * Body param: Bracket order Target price
   */
  boProfitValue?: number;

  /**
   * Body param: Bracket Order/Cover Order Stop Loss Price
   */
  boStopLossValue?: number;

  /**
   * Body param: The user/partner generated id for tracking back
   */
  correlationId?: string;

  /**
   * Body param: User specific identification generated by Dhan
   */
  dhanClientId?: string;

  /**
   * Body param: Number shares visible in the market depth
   */
  disclosedQuantity?: number;

  /**
   * | Body param:      | **Enum Values**             | **Description** |
   * | ---------------- | --------------------------- | --------------- |
   * | LIMIT            | For Limit Order types       |
   * | MARKET           | For market Order types      |
   * | STOP_LOSS        | For Stop Loss Limit orders  |
   * | STOP_LOSS_MARKET | For Stop Loss Market orders |
   */
  orderType?: 'LIMIT' | 'MARKET' | 'STOP_LOSS' | 'STOP_LOSS_MARKET';

  /**
   * Body param: Price at which the order is requested to execute
   */
  price?: number;

  /**
   * | Body param: | **Enum Values**                                | **Description** |
   * | ----------- | ---------------------------------------------- | --------------- |
   * | CNC         | Cash & Carry for equity deliveries             |
   * | INTRADAY    | Intraday for Equity, Futures & Options         |
   * | MARGIN      | Carry Forward in Futures & Options             |
   * | CO          | Cover Order; entry and stop loss               |
   * | BO          | Bracket Order; entry, stop loss & target price |
   * | MTF         | Margin Traded Fund                             |
   *
   * **CO & BO product types will be valid only for Intraday**
   */
  productType?: 'CNC' | 'INTRADAY' | 'MARGIN' | 'MTF' | 'CO' | 'BO';

  /**
   * Body param: Number of shares for the order
   */
  quantity?: number;

  /**
   * Body param: Exchange standard identification for each scrip
   */
  securityId?: string;

  /**
   * Body param: Price at which the order is triggered
   */
  triggerPrice?: number;

  /**
   * | Body param: | **Enum Values**       | **Description** |
   * | ----------- | --------------------- | --------------- |
   * | DAY         | Valid till end of day |
   * | IOC         | Immediate or Cancel   |
   */
  validity?: 'DAY' | 'IOC';
}

export namespace Orders {
  export import OrderStatus = OrdersAPI.OrderStatus;
  export import OrderListResponse = OrdersAPI.OrderListResponse;
  export import OrderSlicingResponse = OrdersAPI.OrderSlicingResponse;
  export import OrderCreateParams = OrdersAPI.OrderCreateParams;
  export import OrderRetrieveParams = OrdersAPI.OrderRetrieveParams;
  export import OrderUpdateParams = OrdersAPI.OrderUpdateParams;
  export import OrderListParams = OrdersAPI.OrderListParams;
  export import OrderDeleteParams = OrdersAPI.OrderDeleteParams;
  export import OrderSlicingParams = OrdersAPI.OrderSlicingParams;
  export import External = ExternalAPI.External;
  export import ExternalRetrieveParams = ExternalAPI.ExternalRetrieveParams;
}
